#!/usr/bin/env python
import argparse, os, subprocess, sys
from bpl.compiler import compile
from bpl.scanner.scanner import ScannerException
from bpl.parser.parser import ParserException
from bpl.type_checker.type_checker import TypeCheckerException

# handle command-line arguments and flags
parser = argparse.ArgumentParser()
parser.add_argument('FILE', help='a .bpl file')
parser.add_argument('-s', '--stop-at-assembly', help='stop compilation at assembly generation', action='store_true')
parser.add_argument('-o', '--output-file', help='write output to file')
args = parser.parse_args()

# default output file and assembly file names
output_file_name = 'a.out'
assembly_file_name = os.path.basename(args.FILE).rstrip('.bpl') + '.s'

# if an output file name is specified:
if args.output_file:
    # use args.output_file as the output file name
    output_file_name = args.output_file
    # if we are only generating assembly, use args.output_file as the assembly file name
    if args.stop_at_assembly:
        assembly_file_name = args.output_file

if not args.FILE.endswith('.bpl'):
    print "Error: File name does not have a .bpl extension."
    sys.exit(1)
try:
    input_file = open(args.FILE)
except IOError:
    print "Error: Unable to open .bpl file."
    sys.exit(1)

# generate the assembly file using the bpl package
with open(assembly_file_name, 'w') as assembly_file:
    try:
        compile(input_file, assembly_file)
    except (ScannerException, ParserException, TypeCheckerException) as e:
        print e.message
        input_file.close()
        assembly_file.close()
        sys.exit(1)

input_file.close()

#assembly_status = subprocess.call(['python', '-m', 'bpl', args.FILE, assembly_file_name])
# if we are generating a binary file as well as assembly:
if not args.stop_at_assembly:
    # generate the binary file
    subprocess.call(['gcc', assembly_file_name, '-o', output_file_name])
    # clean up the assembly file
    subprocess.call(['rm', assembly_file_name])
